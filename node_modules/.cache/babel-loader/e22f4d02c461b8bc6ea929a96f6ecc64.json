{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef, useContext } from 'react';\nimport { Button, Container, Col, Row, Input } from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\n\nimport { GlobalContext } from '../Context/GlobalState';\nimport { helperFunctions } from '../Resources/functions'; //Initial values\n\nlet gridLayout = [50, 30]; //numRow, numCols\n\nlet speed = 1000; //positions from which the cell looks for neighbors\n\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n]; //helper functions\n\nconst clearGrid = () => {\n  const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n  for (let i = 0; i < gridLayout[0]; i++) {\n    //here we push to row Array using .from method, the length will be numCols and for each one\n    //we map a value of 0 (dead cell state)\n    rows.push(Array.from(Array(gridLayout[1]), () => 0));\n  }\n\n  return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n  let size = [rows, cols];\n  gridLayout = [...size];\n  console.log(gridLayout);\n};\n\nconst countNeighbors = (grid, rows, cols) => {\n  return neighborsLoc.reduce((acc, [xCoord, yCoord]) => {\n    //this takes the neighborsLoc Arr and returns a number to see how many are alive\n    const row = (rows + xCoord + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n\n    const col = (cols + yCoord + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n\n    acc += grid[row][col];\n    return acc;\n  }, 0);\n}; //component starts here  \n\n\nexport const Grid = () => {\n  _s();\n\n  const {\n    config\n  } = useContext(GlobalContext);\n  console.log(config); //useState Hook variables\n  //to create grid, we use useState hook\n\n  const [grid, setGrid] = useState(() => {\n    return clearGrid();\n  });\n  const [play, setPlay] = useState(false); //to set the play status\n\n  const [autoTime, setAutoTime] = useState(500); //to set game speed\n\n  const [generation, setGeneration] = useState(0); //to view current generation\n  //useRef to store the value of play and using it on autoGame func. \n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generations\n\n  const genRef = useRef(generation);\n  genRef.current = generation;\n\n  const nextGen = () => {\n    setPlay(true);\n\n    if (play === false) {\n      playRef.current = true;\n      console.log('corriendo');\n      autoGame();\n    }\n\n    setPlay(false);\n    if (play) playRef.current = false;\n  }; //useCallback to run autoGame function only once\n\n\n  const autoGame = useCallback(() => {\n    //to ensure that the game stops, if the playRef is false we return the autoGame function\n    if (playRef.current === false) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors.\n      return produce(currentGrid, gridChanged => {\n        for (let rowsIteration = 0; rowsIteration < gridLayout[0]; rowsIteration++) {\n          for (let colsIteration = 0; colsIteration < gridLayout[1]; colsIteration++) {\n            let livingNeighbors = countNeighbors(currentGrid, rowsIteration, colsIteration);\n\n            if (currentGrid[rowsIteration][colsIteration] === 1 && (livingNeighbors < 2 || livingNeighbors > 3)) {\n              gridChanged[rowsIteration][colsIteration] = 0;\n            }\n\n            if (currentGrid[rowsIteration][colsIteration] === 0 && livingNeighbors === 3) {\n              gridChanged[rowsIteration][colsIteration] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, speed);\n  }, []); //useCallback closes here, [] to run just once\n  //return Statement starts here\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"justify-content-center\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(true);\n\n            if (play === false) {\n              playRef.current = true;\n              autoGame();\n            }\n          },\n          children: \"Iniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(false);\n            if (play) playRef.current = false;\n          },\n          children: \"Detener \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            nextGen();\n          },\n          children: \"Sig. Generacion \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n          },\n          children: \"Reiniciar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: '350px'\n          },\n          type: \"number\",\n          placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n          onChange: e => {\n            speed = helperFunctions.timeSet(e.target.value);\n            setAutoTime(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y con una velocidad de \", autoTime / 1000, \" seg \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n              columnGap: '5px',\n              rowGap: '5px'\n            },\n            children: grid.map((rows, xCoord) => rows.map((col, yCoord) => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                //produce() takes the argument of individual grid, copies it and then mutates it.\n                const newGrid = produce(grid, gridEdited => {\n                  //check if current cell at [xCoord][yCoord] is dead or alive, it toggles the value between them \n                  gridEdited[xCoord][yCoord] ^= 1;\n                });\n                setGrid(newGrid);\n              },\n              style: {\n                width: 20,\n                height: 20,\n                border: 'solid 1px blue',\n                borderRadius: '100%',\n                backgroundColor: grid[xCoord][yCoord] ? 'green' : ''\n              }\n            }, `${xCoord}-${yCoord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Editar tama\\xF1os del grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(10, 10);\n              setGrid(clearGrid());\n            },\n            children: \" 10 x 10 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(20, 30);\n              setGrid(clearGrid());\n            },\n            children: \" 20 x 30 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(25, 25);\n              setGrid(clearGrid());\n            },\n            children: \" 25 x 25 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginBottom: '15px'\n          },\n          onClick: () => {\n            gridSize(50, 30);\n            setGrid(clearGrid());\n          },\n          children: \" 50 x 30 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginBottom: '15px'\n          },\n          onClick: () => {\n            console.log(`${config.speed} aqui prueba`);\n            setGrid(clearGrid());\n          },\n          children: \" Prueba de console log \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '14x'\n            },\n            children: [\"Generaci\\xF3n # \", generation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"/ImTfDkeZhT2frm8SSeBbMMT1G4=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","useContext","Button","Container","Col","Row","Input","produce","GlobalContext","helperFunctions","gridLayout","speed","neighborsLoc","clearGrid","rows","i","push","Array","from","gridSize","cols","size","console","log","countNeighbors","grid","reduce","acc","xCoord","yCoord","row","col","Grid","config","setGrid","play","setPlay","autoTime","setAutoTime","generation","setGeneration","playRef","current","genRef","nextGen","autoGame","currentGrid","gridChanged","rowsIteration","colsIteration","livingNeighbors","setTimeout","backgroundColor","color","border","marginRight","width","e","timeSet","target","value","display","gridTemplateColumns","columnGap","rowGap","map","newGrid","gridEdited","height","borderRadius","marginBottom","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useContext } from 'react';\nimport {Button, Container, Col,  Row, Input} from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\nimport { GlobalContext } from '../Context/GlobalState';\nimport { helperFunctions } from '../Resources/functions';\n\n\n//Initial values\nlet gridLayout = [50, 30]; //numRow, numCols\nlet speed = 1000;\n\n//positions from which the cell looks for neighbors\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\n\n//helper functions\nconst clearGrid = () => {\n    const rows = [];\n    //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n    for (let i = 0; i < gridLayout[0]; i++) {\n        //here we push to row Array using .from method, the length will be numCols and for each one\n        //we map a value of 0 (dead cell state)\n        rows.push(Array.from(Array(gridLayout[1]), () => 0 ));\n    }\n    return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n    let size = [rows, cols]\n    gridLayout = [...size];\n    console.log(gridLayout);\n};\n\n\nconst countNeighbors = (grid, rows, cols) => {\n    return neighborsLoc.reduce((acc, [xCoord, yCoord]) => { //this takes the neighborsLoc Arr and returns a number to see how many are alive\n      const row = (rows + xCoord + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n      const col = (cols + yCoord + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n      acc += grid[row][col];\n      return acc;\n    }, 0);\n  };\n\n\n//component starts here  \nexport const Grid = () => {\n\n    const {config} = useContext(GlobalContext);\n    console.log(config);\n\n    //useState Hook variables\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return clearGrid();\n    });\n    const [play, setPlay] = useState(false); //to set the play status\n    const [autoTime, setAutoTime] = useState(500); //to set game speed\n    const [generation, setGeneration] = useState(0); //to view current generation\n\n    //useRef to store the value of play and using it on autoGame func. \n    const playRef = useRef(play);\n    playRef.current = play; \n\n    //idem for generations\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    const nextGen = () => {\n        setPlay(true);\n        if(play === false){\n            playRef.current = true;\n            console.log('corriendo');\n            autoGame();\n        }\n        setPlay(false);\n        if(play) playRef.current = false;\n    };\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n        //to ensure that the game stops, if the playRef is false we return the autoGame function\n        if(playRef.current === false) {\n            return;\n        }\n\n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors.\n            return produce(currentGrid, gridChanged => {\n                for (let rowsIteration = 0; rowsIteration < gridLayout[0]; rowsIteration++) {\n                    for (let colsIteration = 0; colsIteration < gridLayout[1]; colsIteration++) {\n                        let livingNeighbors = countNeighbors(currentGrid, rowsIteration, colsIteration);                              \n                        if (currentGrid[rowsIteration][colsIteration] === 1 && (livingNeighbors < 2 || livingNeighbors > 3)){\n                        gridChanged[rowsIteration][colsIteration] = 0;\n                        }\n                        if (currentGrid[rowsIteration][colsIteration] === 0 && livingNeighbors === 3) {\n                        gridChanged[rowsIteration][colsIteration] = 1;\n                        }\n                    }\n                }\n            });\n        });\n        setGeneration(++genRef.current); //increases generation by one per turn\n        setTimeout(autoGame, speed);\n\n    },[]) //useCallback closes here, [] to run just once\n\n\n    //return Statement starts here\n    return (\n        <Container className='justify-content-center'>\n        <Row className='mb-4'>\n            <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(true);\n            if(play === false){\n                playRef.current = true;\n                autoGame();\n            }\n        }} >Iniciar</Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(false);\n            if(play) playRef.current = false;\n        }} >Detener </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            nextGen();\n        }} >Sig. Generacion </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n        }} >Reiniciar </Button>\n        </Col>\n        <Col>\n        <Input style={{width: '350px'}}\n        type='number'\n        placeholder='Introduce tiempo de ejecución deseado'\n        onChange={e => {\n            speed = helperFunctions.timeSet(e.target.value);\n            setAutoTime(e.target.value);\n        }}\n        />\n        </Col>\n        </Row>\n        <Row>\n        <Col>\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y con una velocidad de {autoTime/1000} seg </p>\n        </Col>\n        </Row>\n        <Row>\n        <Col>        \n        <div className='d-flex justify-content-center'>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {/* this maps the grid's x and y coordinates */}\n            {grid.map ((rows, xCoord) =>\n                rows.map( (col, yCoord) => \n                <div \n                    key={`${xCoord}-${yCoord}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        const newGrid = produce(grid, gridEdited => {\n                            //check if current cell at [xCoord][yCoord] is dead or alive, it toggles the value between them \n                            gridEdited[xCoord][yCoord] ^= 1;\n                        });\n                        setGrid(newGrid);\n                }} \n                style={{ \n                    width:20, \n                    height:20, \n                    border: 'solid 1px blue',\n                    borderRadius: '100%', \n                    backgroundColor: grid[xCoord][yCoord] ? 'green' : ''}} />\n                ))}\n                </div>\n            </div>\n            </Col>\n            <Col>\n            <p>Editar tamaños del grid</p>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(10,10);\n                setGrid(clearGrid());\n            }}> 10 x 10 </Button>\n            </Col>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(20,30);\n                setGrid(clearGrid());\n            }}> 20 x 30 </Button>\n            </Col>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(25,25);\n                setGrid(clearGrid());\n            }}> 25 x 25 </Button>\n            </Col>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginBottom:'15px'}} onClick={()=>{\n                gridSize(50,30);\n                setGrid(clearGrid());\n            }}> 50 x 30 </Button>\n                        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginBottom:'15px'}} onClick={()=>{\n                console.log(`${config.speed} aqui prueba`);\n                setGrid(clearGrid());\n            }}> Prueba de console log </Button>\n            <Col>\n            <p style={{fontSize:'14x'}}>Generación # {generation}</p>\n            </Col>\n            </Col>\n        </Row>\n        </Container>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}