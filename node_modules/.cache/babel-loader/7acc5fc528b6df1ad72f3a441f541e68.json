{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport produce from 'immer';\nlet numRows = 15;\nlet numCols = 15;\nexport const Grid = () => {\n  _s();\n\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${numCols}, 20px)`,\n      columnGap: '5px',\n      rowGap: '5px'\n    },\n    children: grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => {\n        const newGrid = produce(grid, gridCopy => {\n          gridCopy[i][j] = grid[i][j] ? 1 : 0;\n        });\n        setGrid(newGrid);\n      },\n      style: {\n        width: 20,\n        height: 20,\n        border: 'solid 1px black',\n        borderRadius: '100%',\n        backgroundColor: grid[i][j] ? 'green' : ''\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 39\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"vQkNtsOgwD4VLTpC8MqkLP6BALI=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","produce","numRows","numCols","Grid","grid","setGrid","rows","i","push","Array","from","display","gridTemplateColumns","columnGap","rowGap","map","col","j","newGrid","gridCopy","width","height","border","borderRadius","backgroundColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,MAAM;AACnC,UAAMO,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAApB,EAA6BM,CAAC,EAA9B,EAAkC;AAC9BD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,OAAD,CAAhB,EAA2B,MAAM,CAAjC,CAAV;AACH;;AACD,WAAOI,IAAP;AACH,GAN+B,CAAhC;AASA,sBACI;AAAK,IAAA,KAAK,EAAE;AACRK,MAAAA,OAAO,EAAE,MADD;AAERC,MAAAA,mBAAmB,EAAG,UAASV,OAAQ,SAF/B;AAGRW,MAAAA,SAAS,EAAE,KAHH;AAIRC,MAAAA,MAAM,EAAE;AAJA,KAAZ;AAAA,cAMKV,IAAI,CAACW,GAAL,CAAU,CAACT,IAAD,EAAOC,CAAP,KACPD,IAAI,CAACS,GAAL,CAAU,CAACC,GAAD,EAAMC,CAAN,kBAAY;AAEtB,MAAA,OAAO,EAAE,MAAI;AACT,cAAMC,OAAO,GAAGlB,OAAO,CAACI,IAAD,EAAOe,QAAQ,IAAI;AACtCA,UAAAA,QAAQ,CAAEZ,CAAF,CAAR,CAAaU,CAAb,IAAkBb,IAAI,CAACG,CAAD,CAAJ,CAAQU,CAAR,IAAa,CAAb,GAAiB,CAAnC;AACH,SAFsB,CAAvB;AAGAZ,QAAAA,OAAO,CAACa,OAAD,CAAP;AACH,OAPqB;AAQtB,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAC,EAAR;AAAYC,QAAAA,MAAM,EAAC,EAAnB;AAAuBC,QAAAA,MAAM,EAAE,iBAA/B;AACPC,QAAAA,YAAY,EAAE,MADP;AAEPC,QAAAA,eAAe,EAAEpB,IAAI,CAACG,CAAD,CAAJ,CAAQU,CAAR,IAAa,OAAb,GAAuB;AAFjC;AARe,OAChB,GAAEV,CAAE,IAAGU,CAAE,EADO;AAAA;AAAA;AAAA;AAAA,YAAtB,CADH;AANL;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAhCM;;GAAMd,I;;KAAAA,I","sourcesContent":["import React, { useState } from 'react';\nimport produce from 'immer';\n\nlet numRows = 15;\nlet numCols = 15;\n\nexport const Grid = () => {\n    const [grid, setGrid] = useState(() => {\n        const rows = [];\n        for (let i = 0; i < numRows; i++) {\n            rows.push(Array.from(Array(numCols), () => 0 ));\n        }\n        return rows;\n    })\n     \n\n    return (\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => <div \n                key={`${i}-${j}`}\n                onClick={()=>{\n                    const newGrid = produce(grid, gridCopy => {\n                        gridCopy [i][j] = grid[i][j] ? 1 : 0;\n                    });\n                    setGrid(newGrid);\n                }} \n                style={{ width:20, height:20, border: 'solid 1px black',\n                borderRadius: '100%', \n                backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}