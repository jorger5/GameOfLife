{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport produce from 'immer';\nimport { UserControls } from './userControls';\nlet numRows = 10;\nlet numCols = 15;\nexport const Grid = () => {\n  _s();\n\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n    for (let i = 0; i < numRows; i++) {\n      //here we push to row Array using .from method, the length will be numCols and for each one\n      //we map a value of 0 (dead cell state)\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n  });\n  const [play, setPlay] = useState(false);\n  const [autoTime, setAutoTime] = useState(1000);\n  const autoGame = useCallback(() => {\n    if (!play) {\n      return;\n    }\n\n    setTimeout(autoGame, autoTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPlay(true);\n      },\n      children: \"Iniciar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPlay(false);\n      },\n      children: \"Detener \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n      onChange: e => setAutoTime(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y simulando a \", autoTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        columnGap: '5px',\n        rowGap: '5px'\n      },\n      children: [grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          //produce() takes the argument of individual grid, copies it and then mutates it.\n          //\n          const newGrid = produce(grid, gridCopy => {\n            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n            gridCopy[i][j] = grid[i][j] ? 0 : 'alive';\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          border: 'solid 1px black',\n          borderRadius: '100%',\n          backgroundColor: grid[i][j] ? 'green' : ''\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this))), /*#__PURE__*/_jsxDEV(UserControls, {\n        play: play,\n        setPlay: setPlay,\n        autoTime: autoTime,\n        setAutoTime: setAutoTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Grid, \"Z0f7XiXsOVLWULcAji4up2tEMGs=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","produce","UserControls","numRows","numCols","Grid","grid","setGrid","rows","i","push","Array","from","play","setPlay","autoTime","setAutoTime","autoGame","setTimeout","e","target","value","display","gridTemplateColumns","columnGap","rowGap","map","col","j","newGrid","gridCopy","width","height","border","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport produce from 'immer';\n\nimport {UserControls} from './userControls'\n\nlet numRows = 10;\nlet numCols = 15;\n\nexport const Grid = () => {\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        const rows = [];\n        //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n        for (let i = 0; i < numRows; i++) {\n            //here we push to row Array using .from method, the length will be numCols and for each one\n            //we map a value of 0 (dead cell state)\n            rows.push(Array.from(Array(numCols), () => 0 ));\n        }\n        return rows;\n    });\n\n    const [play, setPlay] = useState(false);\n    const [autoTime, setAutoTime] = useState(1000);\n\n    const autoGame = useCallback(() =>{\n        if(!play) {\n            return;\n        }\n\n        setTimeout(autoGame, autoTime);\n\n    },[])\n\n    return (\n        <>\n        <button onClick={()=>{\n            setPlay(true);\n        }} >Iniciar</button>\n        <button onClick={()=>{\n            setPlay(false);\n        }} >Detener </button>\n\n        <input\n        placeholder='Introduce tiempo de ejecuciÃ³n deseado'\n        onChange={e => setAutoTime(e.target.value)}\n        />\n\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y simulando a {autoTime}</p>\n        \n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => \n                <div \n                    key={`${i}-${j}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        //\n                        const newGrid = produce(grid, gridCopy => {\n                            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                            gridCopy [i][j] = grid[i][j] ? 0 : 'alive';\n                        });\n                    setGrid(newGrid);\n                }} \n                style={{ \n                width:20, \n                height:20, \n                border: 'solid 1px black',\n                borderRadius: '100%', \n                backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n            <UserControls\n            play={play}\n            setPlay={setPlay}\n            autoTime= {autoTime}\n            setAutoTime = {setAutoTime}\n            />\n        </div>\n        </>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}