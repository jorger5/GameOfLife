{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nconst numRows = 50;\nconst numCols = 50;\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nexport const Test = () => {\n  _s();\n\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setRunning(!running);\n\n        if (!running) {\n          runningRef.current = true;\n          runSimulation();\n        }\n      },\n      children: running ? \"stop\" : \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const rows = [];\n\n        for (let i = 0; i < numRows; i++) {\n          rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n        }\n\n        setGrid(rows);\n      },\n      children: \"random\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setGrid(generateEmptyGrid());\n      },\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      },\n      children: grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          const newGrid = produce(grid, gridCopy => {\n            gridCopy[i][k] = grid[i][k] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][k] ? \"pink\" : undefined,\n          border: \"solid 1px black\"\n        }\n      }, `${i}-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Test, \"OLFQOIRFX7Xks6KP2P2XjGMgxfo=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Test.js"],"names":["React","useState","useCallback","useRef","produce","numRows","numCols","operations","generateEmptyGrid","rows","i","push","Array","from","Test","grid","setGrid","running","setRunning","runningRef","current","runSimulation","g","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","Math","random","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\n\nexport const Test = () => {\n\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n      });\n    \n      const [running, setRunning] = useState(false);\n    \n      const runningRef = useRef(running);\n      runningRef.current = running;\n    \n      const runSimulation = useCallback(() => {\n        if (!runningRef.current) {\n          return;\n        }\n    \n        setGrid(g => {\n          return produce(g, gridCopy => {\n            for (let i = 0; i < numRows; i++) {\n              for (let k = 0; k < numCols; k++) {\n                let neighbors = 0;\n                operations.forEach(([x, y]) => {\n                  const newI = i + x;\n                  const newK = k + y;\n                  if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                    neighbors += g[newI][newK];\n                  }\n                });\n    \n                if (neighbors < 2 || neighbors > 3) {\n                  gridCopy[i][k] = 0;\n                } else if (g[i][k] === 0 && neighbors === 3) {\n                  gridCopy[i][k] = 1;\n                }\n              }\n            }\n          });\n        });\n    \n        setTimeout(runSimulation, 100);\n      }, []);\n    \n    return (\n        <>\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"stop\" : \"start\"}\n        </button>\n        <button\n          onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n              rows.push(\n                Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n              );\n            }\n  \n            setGrid(rows);\n          }}\n        >\n          random\n        </button>\n        <button\n          onClick={() => {\n            setGrid(generateEmptyGrid());\n          }}\n        >\n          clear\n        </button>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numCols}, 20px)`\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][k] ? \"pink\" : undefined,\n                  border: \"solid 1px black\"\n                }}\n              />\n            ))\n          )}\n        </div>\n      </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}