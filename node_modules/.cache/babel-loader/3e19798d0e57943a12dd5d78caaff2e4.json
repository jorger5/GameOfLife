{"ast":null,"code":"//this has all the functions used in the Grid Component\nexport const helperFunctions = {\n  clearGridX: gridLayout => {\n    const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n    for (let i = 0; i < gridLayout[0]; i++) {\n      //here we push to row Array using .from method, the length will be numCols and for each one\n      //we map a value of 0 (dead cell state)\n      rows.push(Array.from(Array(gridLayout[1]), () => 0));\n    }\n\n    return rows;\n  },\n  gridSize: (rows = 50, cols = 30) => {\n    const size = [rows, cols];\n    gridLayout = [...size];\n    return gridLayout;\n  },\n  timeSet: time => {\n    return time;\n  }\n};","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Resources/functions.js"],"names":["helperFunctions","clearGridX","gridLayout","rows","i","push","Array","from","gridSize","cols","size","timeSet","time"],"mappings":"AAAA;AAEA,OAAO,MAAMA,eAAe,GAAE;AAC1BC,EAAAA,UAAU,EAAIC,UAAD,IAAgB;AACzB,UAAMC,IAAI,GAAC,EAAX,CADyB,CAEzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAAC,CAAD,CAA9B,EAAmCE,CAAC,EAApC,EAAwC;AACpC;AACA;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,UAAU,CAAC,CAAD,CAAX,CAAhB,EAAiC,MAAM,CAAvC,CAAV;AACH;;AACD,WAAOC,IAAP;AACH,GAVyB;AAW1BK,EAAAA,QAAQ,EAAG,CAACL,IAAI,GAAG,EAAR,EAAYM,IAAI,GAAG,EAAnB,KAA0B;AACjC,UAAMC,IAAI,GAAG,CAACP,IAAD,EAAOM,IAAP,CAAb;AACAP,IAAAA,UAAU,GAAG,CAAC,GAAGQ,IAAJ,CAAb;AACA,WAAOR,UAAP;AACH,GAfyB;AAiB1BS,EAAAA,OAAO,EAAGC,IAAD,IAAU;AACf,WAAOA,IAAP;AACH;AAnByB,CAAvB","sourcesContent":["//this has all the functions used in the Grid Component\n\nexport const helperFunctions ={\n    clearGridX : (gridLayout) => {\n        const rows=[];\n        //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n        for (let i = 0; i < gridLayout[0]; i++) {\n            //here we push to row Array using .from method, the length will be numCols and for each one\n            //we map a value of 0 (dead cell state)\n            rows.push(Array.from(Array(gridLayout[1]), () => 0 ));\n        }\n        return rows;\n    },\n    gridSize: ((rows = 50, cols = 30) => {\n        const size = [rows, cols];\n        gridLayout = [...size];\n        return gridLayout;\n    }),\n\n    timeSet: (time) => {\n        return time;\n    }\n};"]},"metadata":{},"sourceType":"module"}