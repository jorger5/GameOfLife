{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { Button, Container, Col, Row, Input } from 'reactstrap';\nimport produce from 'immer';\nlet gridLayout = [50, 30]; // let numRows = 50;\n// let numCols = 30;\n\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n  const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n  for (let i = 0; i < gridLayout[0]; i++) {\n    //here we push to row Array using .from method, the length will be numCols and for each one\n    //we map a value of 0 (dead cell state)\n    rows.push(Array.from(Array(gridLayout[1]), () => 0));\n  }\n\n  return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n  let size = [rows, cols];\n  gridLayout = [size];\n  console.log(gridLayout);\n};\n\nexport const Grid = () => {\n  _s();\n\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    return clearGrid();\n  });\n  const [play, setPlay] = useState(false);\n  const [autoTime, setAutoTime] = useState(1000);\n  const [generation, setGeneration] = useState(0);\n\n  const nextGen = () => {\n    setPlay(true);\n\n    if (play === false) {\n      playRef.current = true;\n      console.log('corriendo');\n      autoGame();\n    }\n\n    setPlay(false);\n    if (play) playRef.current = false;\n  }; //useRef to store the value of play and using it on autoGame func\n\n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generations\n\n  const genRef = useRef(generation);\n  genRef.current = generation; //useCallback to run autoGame function only once\n\n  const autoGame = useCallback(() => {\n    if (!playRef.current) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors\n      return produce(currentGrid, gridChanged => {\n        for (let i = 0; i < gridLayout[0]; i++) {\n          for (let j = 0; j < gridLayout[1]; j++) {\n            let livingNeighbors = 0;\n            neighborsLoc.forEach(([x, y]) => {\n              //looks around for living neighbors\n              const newI = i + x;\n              const newJ = j + y;\n\n              if (newI >= 0 && newI < gridLayout[0] && newJ >= 0 && newJ < gridLayout[1]) {\n                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n              }\n            });\n\n            if (livingNeighbors < 2 || livingNeighbors > 3) {\n              gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n            } else if (currentGrid[i][j] === 0 && livingNeighbors === 3) {\n              gridChanged[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, autoTime);\n  }, []); //useCallback closes here\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"justify-content-center\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(true);\n\n            if (play === false) {\n              playRef.current = true;\n              console.log('corriendo');\n              autoGame();\n            }\n          },\n          children: \"Iniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(false);\n            if (play) playRef.current = false;\n          },\n          children: \"Detener \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            nextGen();\n          },\n          children: \"Sig. Generacion \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n          },\n          children: \"Reiniciar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: '450px'\n          },\n          type: \"number\",\n          placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n          onChange: e => setAutoTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: '50px'\n          },\n          placeholder: \"Fila\",\n          onChange: e => gridSize(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '16px'\n          },\n          children: [\"Generaci\\xF3n # \", generation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y simulando a \", autoTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n              columnGap: '5px',\n              rowGap: '5px'\n            },\n            children: grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                //produce() takes the argument of individual grid, copies it and then mutates it.\n                //\n                const newGrid = produce(grid, gridCopy => {\n                  //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              },\n              style: {\n                width: 20,\n                height: 20,\n                border: 'solid 1px blue',\n                borderRadius: '100%',\n                backgroundColor: grid[i][j] ? 'green' : ''\n              }\n            }, `${i}-${j}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            gridSize(10, 10);\n          },\n          children: \"Resize \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"hykHD/LS8VnUsY59ShXhtM0Q/z8=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","Button","Container","Col","Row","Input","produce","gridLayout","neighborsLoc","clearGrid","rows","i","push","Array","from","gridSize","cols","size","console","log","Grid","grid","setGrid","play","setPlay","autoTime","setAutoTime","generation","setGeneration","nextGen","playRef","current","autoGame","genRef","currentGrid","gridChanged","j","livingNeighbors","forEach","x","y","newI","newJ","setTimeout","backgroundColor","color","border","marginRight","width","e","target","value","fontSize","display","gridTemplateColumns","columnGap","rowGap","map","col","newGrid","gridCopy","height","borderRadius"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,GAA3B,EAAiCC,GAAjC,EAAsCC,KAAtC,QAAkD,YAAlD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAGI,IAAIC,UAAU,GAAG,CAAC,EAAD,EAAK,EAAL,CAAjB,C,CACA;AACA;;AAEJ,MAAMC,YAAY,GAAG,CACjB,CAAC,CAAD,EAAI,CAAJ,CADiB,EACT;AACR,CAAC,CAAD,EAAI,CAAJ,CAFiB,EAET;AACR,CAAC,CAAD,EAAI,CAAJ,CAHiB,EAGT;AACR,CAAC,CAAD,EAAI,CAAC,CAAL,CAJiB,EAIR;AACT,CAAC,CAAD,EAAI,CAAC,CAAL,CALiB,EAKR;AACT,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CANiB,EAMP;AACV,CAAC,CAAC,CAAF,EAAK,CAAL,CAPiB,EAOR;AACT,CAAC,CAAC,CAAF,EAAK,CAAL,CARiB,CAQT;AARS,CAArB;;AAWA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,IAAI,GAAG,EAAb,CADoB,CAEpB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAAC,CAAD,CAA9B,EAAmCI,CAAC,EAApC,EAAwC;AACpC;AACA;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACN,UAAU,CAAC,CAAD,CAAX,CAAhB,EAAiC,MAAM,CAAvC,CAAV;AACH;;AACD,SAAOG,IAAP;AACH,CATD;;AAWA,MAAMK,QAAQ,GAAG,CAACL,IAAI,GAAG,EAAR,EAAYM,IAAI,GAAG,EAAnB,KAA0B;AACvC,MAAIC,IAAI,GAAG,CAACP,IAAD,EAAOM,IAAP,CAAX;AACAT,EAAAA,UAAU,GAAG,CAACU,IAAD,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ;AACH,CAJD;;AAMA,OAAO,MAAMa,IAAI,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,MAAM;AACnC,WAAOW,SAAS,EAAhB;AACH,GAF+B,CAAhC;AAIA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAM+B,OAAO,GAAG,MAAM;AAClBL,IAAAA,OAAO,CAAC,IAAD,CAAP;;AACA,QAAGD,IAAI,KAAK,KAAZ,EAAkB;AACdO,MAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAa,MAAAA,QAAQ;AACX;;AACDR,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA,QAAGD,IAAH,EAASO,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACZ,GATD,CAVsB,CAuBtB;;;AACA,QAAMD,OAAO,GAAG9B,MAAM,CAACuB,IAAD,CAAtB;AACAO,EAAAA,OAAO,CAACC,OAAR,GAAkBR,IAAlB,CAzBsB,CA2BtB;;AACA,QAAMU,MAAM,GAAGjC,MAAM,CAAC2B,UAAD,CAArB;AACAM,EAAAA,MAAM,CAACF,OAAP,GAAiBJ,UAAjB,CA7BsB,CA+BtB;;AACA,QAAMK,QAAQ,GAAGjC,WAAW,CAAC,MAAM;AAC/B,QAAG,CAAC+B,OAAO,CAACC,OAAZ,EAAqB;AACjB;AACH;;AAEDT,IAAAA,OAAO,CAACY,WAAW,IAAI;AAAG;AACtB,aAAO5B,OAAO,CAAC4B,WAAD,EAAcC,WAAW,IAAI;AACvC,aAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAAC,CAAD,CAA9B,EAAmCI,CAAC,EAApC,EAAwC;AACpC,eAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,UAAU,CAAC,CAAD,CAA9B,EAAmC6B,CAAC,EAApC,EAAwC;AACpC,gBAAIC,eAAe,GAAG,CAAtB;AACA7B,YAAAA,YAAY,CAAC8B,OAAb,CAAsB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY;AAAE;AAChC,oBAAMC,IAAI,GAAG9B,CAAC,GAAG4B,CAAjB;AACA,oBAAMG,IAAI,GAAGN,CAAC,GAAGI,CAAjB;;AACA,kBAAIC,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAGlC,UAAU,CAAC,CAAD,CAA9B,IAAqCmC,IAAI,IAAI,CAA7C,IAAkDA,IAAI,GAAGnC,UAAU,CAAC,CAAD,CAAvE,EAA2E;AACvE8B,gBAAAA,eAAe,IAAIH,WAAW,CAACO,IAAD,CAAX,CAAkBC,IAAlB,CAAnB,CADuE,CAC3B;AAC/C;AACJ,aAND;;AAQA,gBAAIL,eAAe,GAAG,CAAlB,IAAuBA,eAAe,GAAG,CAA7C,EAAgD;AAC5CF,cAAAA,WAAW,CAACxB,CAAD,CAAX,CAAeyB,CAAf,IAAoB,CAApB,CAD4C,CACrB;AAC1B,aAFD,MAEO,IAAIF,WAAW,CAACvB,CAAD,CAAX,CAAeyB,CAAf,MAAsB,CAAtB,IAA2BC,eAAe,KAAI,CAAlD,EAAoD;AACvDF,cAAAA,WAAW,CAACxB,CAAD,CAAX,CAAeyB,CAAf,IAAoB,CAApB;AACH;AACJ;AACJ;AACJ,OAnBa,CAAd;AAoBH,KArBM,CAAP;AAsBAR,IAAAA,aAAa,CAAC,EAAEK,MAAM,CAACF,OAAV,CAAb,CA3B+B,CA2BE;;AAErCY,IAAAA,UAAU,CAACX,QAAD,EAAWP,QAAX,CAAV;AAEC,GA/B2B,EA+B1B,EA/B0B,CAA5B,CAhCsB,CA+DhB;;AAEN,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,wBAArB;AAAA,4BACA,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI,QAAC,GAAD;AAAA,+BACJ,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACmB,YAAAA,eAAe,EAAC,SAAjB;AAA4BC,YAAAA,KAAK,EAAC,OAAlC;AAA2CC,YAAAA,MAAM,EAAC,MAAlD;AAA0DC,YAAAA,WAAW,EAAC;AAAtE,WAAf;AAA8F,UAAA,OAAO,EAAE,MAAI;AACvGvB,YAAAA,OAAO,CAAC,IAAD,CAAP;;AACA,gBAAGD,IAAI,KAAK,KAAZ,EAAkB;AACdO,cAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACAb,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAa,cAAAA,QAAQ;AACX;AACJ,WAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,cADJ,eAWA,QAAC,GAAD;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACY,YAAAA,eAAe,EAAC,SAAjB;AAA4BC,YAAAA,KAAK,EAAC,OAAlC;AAA2CC,YAAAA,MAAM,EAAC,MAAlD;AAA0DC,YAAAA,WAAW,EAAC;AAAtE,WAAf;AAA8F,UAAA,OAAO,EAAE,MAAI;AACvGvB,YAAAA,OAAO,CAAC,KAAD,CAAP;AACA,gBAAGD,IAAH,EAASO,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACZ,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAXA,eAiBA,QAAC,GAAD;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACa,YAAAA,eAAe,EAAC,SAAjB;AAA4BC,YAAAA,KAAK,EAAC,OAAlC;AAA2CC,YAAAA,MAAM,EAAC,MAAlD;AAA0DC,YAAAA,WAAW,EAAC;AAAtE,WAAf;AAA8F,UAAA,OAAO,EAAE,MAAI;AACvGlB,YAAAA,OAAO;AACV,WAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAjBA,eAsBA,QAAC,GAAD;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACe,YAAAA,eAAe,EAAC,SAAjB;AAA4BC,YAAAA,KAAK,EAAC,OAAlC;AAA2CC,YAAAA,MAAM,EAAC,MAAlD;AAA0DC,YAAAA,WAAW,EAAC;AAAtE,WAAf;AAA8F,UAAA,OAAO,EAAE,MAAI;AACvGzB,YAAAA,OAAO,CAACb,SAAS,EAAV,CAAP;AACAe,YAAAA,OAAO,CAAC,KAAD,CAAP;AACAI,YAAAA,aAAa,CAAC,CAAD,CAAb;AACH,WAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAtBA,eA6BA,QAAC,GAAD;AAAA,gCACA,QAAC,KAAD;AAAO,UAAA,KAAK,EAAE;AAACoB,YAAAA,KAAK,EAAE;AAAR,WAAd;AACA,UAAA,IAAI,EAAC,QADL;AAEA,UAAA,WAAW,EAAC,0CAFZ;AAGA,UAAA,QAAQ,EAAEC,CAAC,IAAIvB,WAAW,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV;AAH1B;AAAA;AAAA;AAAA;AAAA,gBADA,eAMA,QAAC,KAAD;AAAO,UAAA,KAAK,EAAE;AAACH,YAAAA,KAAK,EAAE;AAAR,WAAd;AACA,UAAA,WAAW,EAAC,MADZ;AAEA,UAAA,QAAQ,EAAEC,CAAC,IAAIlC,QAAQ,CAACkC,CAAC,CAACC,MAAF,CAASC,KAAV;AAFvB;AAAA;AAAA;AAAA;AAAA,gBANA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BA,eAwCA,QAAC,GAAD;AAAA,+BACI;AAAG,UAAA,KAAK,EAAE;AAACC,YAAAA,QAAQ,EAAC;AAAV,WAAV;AAAA,yCAA2CzB,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAxCA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eA6CA,QAAC,GAAD;AAAA,6BACA,QAAC,GAAD;AAAA,+BACA;AAAA,+BAAUJ,IAAI,GAAG,UAAH,GAAgB,UAA9B,qBAAyDE,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YA7CA,eAkDA,QAAC,GAAD;AAAA,8BACA,QAAC,GAAD;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,+BAAf;AAAA,iCACA;AAAK,YAAA,KAAK,EAAE;AACR4B,cAAAA,OAAO,EAAE,MADD;AAERC,cAAAA,mBAAmB,EAAG,UAAS/C,UAAU,CAAC,CAAD,CAAI,SAFrC;AAGRgD,cAAAA,SAAS,EAAE,KAHH;AAIRC,cAAAA,MAAM,EAAE;AAJA,aAAZ;AAAA,sBAMKnC,IAAI,CAACoC,GAAL,CAAU,CAAC/C,IAAD,EAAOC,CAAP,KACPD,IAAI,CAAC+C,GAAL,CAAU,CAACC,GAAD,EAAMtB,CAAN,kBACV;AAEI,cAAA,OAAO,EAAE,MAAI;AACT;AACA;AACA,sBAAMuB,OAAO,GAAGrD,OAAO,CAACe,IAAD,EAAOuC,QAAQ,IAAI;AACtC;AACAA,kBAAAA,QAAQ,CAACjD,CAAD,CAAR,CAAYyB,CAAZ,IAAiBf,IAAI,CAACV,CAAD,CAAJ,CAAQyB,CAAR,IAAa,CAAb,GAAiB,CAAlC;AACH,iBAHsB,CAAvB;AAIJd,gBAAAA,OAAO,CAACqC,OAAD,CAAP;AACH,eAVD;AAWA,cAAA,KAAK,EAAE;AACHX,gBAAAA,KAAK,EAAC,EADH;AAEHa,gBAAAA,MAAM,EAAC,EAFJ;AAGHf,gBAAAA,MAAM,EAAE,gBAHL;AAIHgB,gBAAAA,YAAY,EAAE,MAJX;AAKHlB,gBAAAA,eAAe,EAAEvB,IAAI,CAACV,CAAD,CAAJ,CAAQyB,CAAR,IAAa,OAAb,GAAuB;AALrC;AAXP,eACU,GAAEzB,CAAE,IAAGyB,CAAE,EADnB;AAAA;AAAA;AAAA;AAAA,oBADA,CADH;AANL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADA,eAgCI,QAAC,GAAD;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAACQ,YAAAA,eAAe,EAAC,SAAjB;AAA4BC,YAAAA,KAAK,EAAC,OAAlC;AAA2CC,YAAAA,MAAM,EAAC,MAAlD;AAA0DC,YAAAA,WAAW,EAAC;AAAtE,WAAf;AAA8F,UAAA,OAAO,EAAE,MAAI;AACvGhC,YAAAA,QAAQ,CAAC,EAAD,EAAI,EAAJ,CAAR;AACP,WAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAlDA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2FH,CA5JM;;GAAMK,I;;KAAAA,I","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport {Button, Container, Col,  Row, Input} from 'reactstrap';\nimport produce from 'immer';\n\n\n    let gridLayout = [50, 30];\n    // let numRows = 50;\n    // let numCols = 30;\n\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n    const rows = [];\n    //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n    for (let i = 0; i < gridLayout[0]; i++) {\n        //here we push to row Array using .from method, the length will be numCols and for each one\n        //we map a value of 0 (dead cell state)\n        rows.push(Array.from(Array(gridLayout[1]), () => 0 ));\n    }\n    return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n    let size = [rows, cols]\n    gridLayout = [size];\n    console.log(gridLayout);\n}\n\nexport const Grid = () => {\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return clearGrid();\n    });\n\n    const [play, setPlay] = useState(false);\n    const [autoTime, setAutoTime] = useState(1000);\n    const [generation, setGeneration] = useState(0);\n\n    const nextGen = () => {\n        setPlay(true);\n        if(play === false){\n            playRef.current = true;\n            console.log('corriendo');\n            autoGame();\n        }\n        setPlay(false);\n        if(play) playRef.current = false;\n    };\n\n\n\n    //useRef to store the value of play and using it on autoGame func\n    const playRef = useRef(play);\n    playRef.current = play;\n\n    //idem for generations\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n        if(!playRef.current) {\n            return;\n        }\n\n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors\n            return produce(currentGrid, gridChanged => {\n                for (let i = 0; i < gridLayout[0]; i++) {\n                    for (let j = 0; j < gridLayout[1]; j++) {\n                        let livingNeighbors = 0;\n                        neighborsLoc.forEach( ([x, y]) => { //looks around for living neighbors\n                            const newI = i + x;\n                            const newJ = j + y;\n                            if (newI >= 0 && newI < gridLayout[0] && newJ >= 0 && newJ < gridLayout[1]){\n                                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n                            }\n                        });\n\n                        if (livingNeighbors < 2 || livingNeighbors > 3) {\n                            gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n                        } else if (currentGrid[i][j] === 0 && livingNeighbors ===3){\n                            gridChanged[i][j] = 1;\n                        }\n                    }\n                }\n            });\n        });\n        setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, autoTime);\n\n    },[]) //useCallback closes here\n\n    return (\n        <Container className='justify-content-center'>\n        <Row className='mb-4'>\n            <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(true);\n            if(play === false){\n                playRef.current = true;\n                console.log('corriendo');\n                autoGame();\n            }\n        }} >Iniciar</Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(false);\n            if(play) playRef.current = false;\n        }} >Detener </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            nextGen();\n        }} >Sig. Generacion </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n        }} >Reiniciar </Button>\n        </Col>\n        <Col>\n        <Input style={{width: '450px'}}\n        type='number'\n        placeholder='Introduce tiempo de ejecución deseado'\n        onChange={e => setAutoTime(e.target.value)}\n        />\n        <Input style={{width: '50px'}}\n        placeholder='Fila'\n        onChange={e => gridSize(e.target.value)}\n        />\n        </Col>\n        <Col>\n            <p style={{fontSize:'16px'}}>Generación # {generation}</p>\n        </Col>\n        </Row>\n        <Row>\n        <Col>\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y simulando a {autoTime}</p>\n        </Col>\n        </Row>\n        <Row>\n        <Col>        \n        <div className='d-flex justify-content-center'>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => \n                <div \n                    key={`${i}-${j}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        //\n                        const newGrid = produce(grid, gridCopy => {\n                            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                        });\n                    setGrid(newGrid);\n                }} \n                style={{ \n                    width:20, \n                    height:20, \n                    border: 'solid 1px blue',\n                    borderRadius: '100%', \n                    backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n                </div>\n            </div>\n            </Col>\n            <Col>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n                gridSize(10,10);\n        }} >Resize </Button>\n            </Col>\n        </Row>\n        </Container>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}