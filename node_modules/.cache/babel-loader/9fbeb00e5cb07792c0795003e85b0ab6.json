{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nlet numRows = 10;\nlet numCols = 15;\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n  const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n  for (let i = 0; i < numRows; i++) {\n    //here we push to row Array using .from method, the length will be numCols and for each one\n    //we map a value of 0 (dead cell state)\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nexport const Grid = () => {\n  _s();\n\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    return clearGrid();\n  });\n  const [play, setPlay] = useState(false);\n  const [autoTime, setAutoTime] = useState(1000);\n  const [generation, setGeneration] = useState(0); //useRef to store the value of play and using it on autoGame func\n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generation\n\n  const genRef = useRef(generation);\n  genRef.current = generation; //useCallback to run autoGame function only once\n\n  const autoGame = useCallback(() => {\n    if (!playRef.current) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors\n      produce(currentGrid, gridChanged => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let livingNeighbors = 0;\n            neighborsLoc.forEach(([x, y]) => {\n              //looks around for living neighbors\n              const newI = i + x; //actual i location + the \n\n              const newJ = j + y;\n\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n              }\n            });\n\n            if (livingNeighbors < 2 || livingNeighbors > 3) {\n              gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n            } else if (currentGrid[i][j] === 0 && livingNeighbors === 3) {\n              gridChanged[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(autoGame, autoTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPlay(true);\n\n        if (play === false) {\n          playRef.current = true;\n          console.log('corriendo');\n          autoGame();\n        }\n      },\n      children: \"Iniciar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPlay(false);\n      },\n      children: \"Detener \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setGrid(clearGrid());\n      },\n      children: \"Reiniciar \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n      onChange: e => setAutoTime(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y simulando a \", autoTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        columnGap: '5px',\n        rowGap: '5px'\n      },\n      children: grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          //produce() takes the argument of individual grid, copies it and then mutates it.\n          //\n          const newGrid = produce(grid, gridCopy => {\n            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          border: 'solid 1px blue',\n          borderRadius: '100%',\n          backgroundColor: grid[i][j] ? 'green' : ''\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Grid, \"hykHD/LS8VnUsY59ShXhtM0Q/z8=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","produce","numRows","numCols","neighborsLoc","clearGrid","rows","i","push","Array","from","Grid","grid","setGrid","play","setPlay","autoTime","setAutoTime","generation","setGeneration","playRef","current","genRef","autoGame","currentGrid","gridChanged","j","livingNeighbors","forEach","x","y","newI","newJ","setTimeout","console","log","e","target","value","display","gridTemplateColumns","columnGap","rowGap","map","col","newGrid","gridCopy","width","height","border","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\n\n\nlet numRows = 10;\nlet numCols = 15;\n\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n    const rows = [];\n    //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n    for (let i = 0; i < numRows; i++) {\n        //here we push to row Array using .from method, the length will be numCols and for each one\n        //we map a value of 0 (dead cell state)\n        rows.push(Array.from(Array(numCols), () => 0 ));\n    }\n    return rows;\n};\n\n\nexport const Grid = () => {\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return clearGrid();\n    });\n\n    const [play, setPlay] = useState(false);\n    const [autoTime, setAutoTime] = useState(1000);\n    const [generation, setGeneration] = useState(0);\n\n    //useRef to store the value of play and using it on autoGame func\n    const playRef = useRef(play);\n    playRef.current = play;\n\n    //idem for generation\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n\n    \n        if(!playRef.current) {\n            return;\n        }\n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors\n             produce(currentGrid, gridChanged => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let j = 0; j < numCols; j++) {\n                        let livingNeighbors = 0;\n                        neighborsLoc.forEach( ([x, y]) => { //looks around for living neighbors\n                            const newI = i + x; //actual i location + the \n                            const newJ = j + y;\n                            if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols){\n                                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n                            }\n                        });\n\n                        if (livingNeighbors < 2 || livingNeighbors > 3) {\n                            gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n                        } else if (currentGrid[i][j] === 0 && livingNeighbors ===3){\n                            gridChanged[i][j] = 1;\n                        }\n                        \n                    }\n                }\n            });\n        });\n\n        setTimeout(autoGame, autoTime);\n\n    },[])\n\n    return (\n        <>\n        <button onClick={()=>{\n            setPlay(true);\n            if(play === false){\n                playRef.current = true;\n                console.log('corriendo');\n                autoGame();\n            }\n\n        }} >Iniciar</button>\n        <button onClick={()=>{\n            setPlay(false);\n        }} >Detener </button>\n\n        <button onClick={()=>{\n            setGrid(clearGrid());\n        }} >Reiniciar </button>\n\n        <input\n        placeholder='Introduce tiempo de ejecución deseado'\n        onChange={e => setAutoTime(e.target.value)}\n        />\n\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y simulando a {autoTime}</p>\n        \n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => \n                <div \n                    key={`${i}-${j}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        //\n                        const newGrid = produce(grid, gridCopy => {\n                            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                        });\n                    setGrid(newGrid);\n                }} \n                style={{ \n                    width:20, \n                    height:20, \n                    border: 'solid 1px blue',\n                    borderRadius: '100%', \n                    backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n        </div>\n        </>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}