{"ast":null,"code":"//this object has all the functions used in the Game Component\nexport const helperFunctions = {\n  clearGridX: gridLayout => {\n    //function used to reset the grid\n    const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n    for (let i = 0; i < gridLayout[0]; i++) {\n      //here we push to row Array using .from method, the length will be numCols and for each one\n      //we map a value of 0 (dead cell state)\n      rows.push(Array.from(Array(gridLayout[1]), () => 0));\n    }\n\n    return rows;\n  },\n  gridSize: (rows = 50, cols = 30) => {\n    //function used to resize the grid\n    const size = [rows, cols];\n    return size;\n  },\n  countLiving: (grid, rows, cols, neighborsLoc, gridLayout) => {\n    //function used to count alive neighbors\n    return neighborsLoc.reduce((acc, [xCoord, yCoord]) => {\n      //this takes the neighborsLoc Arr and returns a number to see how many are alive\n      const row = (rows + xCoord + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n\n      const col = (cols + yCoord + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n\n      acc += grid[row][col];\n      return acc;\n    }, 0);\n  },\n  timeSet: time => {\n    //function used to set the running time of each turn\n    return time;\n  }\n};","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/GameOfLife/src/Resources/functions.js"],"names":["helperFunctions","clearGridX","gridLayout","rows","i","push","Array","from","gridSize","cols","size","countLiving","grid","neighborsLoc","reduce","acc","xCoord","yCoord","row","col","timeSet","time"],"mappings":"AAAA;AAEA,OAAO,MAAMA,eAAe,GAAE;AAC1BC,EAAAA,UAAU,EAAIC,UAAD,IAAgB;AAAE;AAC3B,UAAMC,IAAI,GAAC,EAAX,CADyB,CAEzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAAC,CAAD,CAA9B,EAAmCE,CAAC,EAApC,EAAwC;AACpC;AACA;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,UAAU,CAAC,CAAD,CAAX,CAAhB,EAAiC,MAAM,CAAvC,CAAV;AACH;;AACD,WAAOC,IAAP;AACH,GAVyB;AAW1BK,EAAAA,QAAQ,EAAG,CAACL,IAAI,GAAG,EAAR,EAAYM,IAAI,GAAG,EAAnB,KAA0B;AAAE;AACnC,UAAMC,IAAI,GAAG,CAACP,IAAD,EAAOM,IAAP,CAAb;AACA,WAAOC,IAAP;AACH,GAdyB;AAe1BC,EAAAA,WAAW,EAAG,CAACC,IAAD,EAAOT,IAAP,EAAaM,IAAb,EAAmBI,YAAnB,EAAiCX,UAAjC,KAAgD;AAAE;AAC5D,WAAOW,YAAY,CAACC,MAAb,CAAoB,CAACC,GAAD,EAAM,CAACC,MAAD,EAASC,MAAT,CAAN,KAA2B;AAAE;AACtD,YAAMC,GAAG,GAAG,CAACf,IAAI,GAAGa,MAAP,GAAgBd,UAAU,CAAC,CAAD,CAA3B,IAAkCA,UAAU,CAAC,CAAD,CAAxD,CADoD,CACS;;AAC7D,YAAMiB,GAAG,GAAG,CAACV,IAAI,GAAGQ,MAAP,GAAgBf,UAAU,CAAC,CAAD,CAA3B,IAAkCA,UAAU,CAAC,CAAD,CAAxD,CAFoD,CAES;;AAC7Da,MAAAA,GAAG,IAAIH,IAAI,CAACM,GAAD,CAAJ,CAAUC,GAAV,CAAP;AACA,aAAOJ,GAAP;AACD,KALM,EAKJ,CALI,CAAP;AAMD,GAtBuB;AAuB1BK,EAAAA,OAAO,EAAGC,IAAD,IAAU;AAAE;AACjB,WAAOA,IAAP;AACH;AAzByB,CAAvB","sourcesContent":["//this object has all the functions used in the Game Component\n\nexport const helperFunctions ={\n    clearGridX : (gridLayout) => { //function used to reset the grid\n        const rows=[];\n        //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n        for (let i = 0; i < gridLayout[0]; i++) {\n            //here we push to row Array using .from method, the length will be numCols and for each one\n            //we map a value of 0 (dead cell state)\n            rows.push(Array.from(Array(gridLayout[1]), () => 0 ));\n        }\n        return rows;\n    },\n    gridSize: ((rows = 50, cols = 30) => { //function used to resize the grid\n        const size = [rows, cols];\n        return size;\n    }),\n    countLiving : (grid, rows, cols, neighborsLoc, gridLayout) => { //function used to count alive neighbors\n        return neighborsLoc.reduce((acc, [xCoord, yCoord]) => { //this takes the neighborsLoc Arr and returns a number to see how many are alive\n          const row = (rows + xCoord + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n          const col = (cols + yCoord + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n          acc += grid[row][col];\n          return acc;\n        }, 0);\n      },\n    timeSet: (time) => { //function used to set the running time of each turn\n        return time;\n    }\n};"]},"metadata":{},"sourceType":"module"}