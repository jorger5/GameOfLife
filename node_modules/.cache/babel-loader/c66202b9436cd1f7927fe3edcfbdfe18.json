{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { gridLayoutTest } from './Controls';\nimport { Button, Container, Col, Row, Input } from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\n//Initial values\n\nlet gridLayout = [50, 30]; //numRow, numCols\n\nlet speed = 1000; // let numRows = 50;\n// let numCols = 30;\n\nlet prueba = gridLayoutTest; //positions from which the cell looks for neighbors\n\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n  const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n  for (let i = 0; i < gridLayout[0]; i++) {\n    //here we push to row Array using .from method, the length will be numCols and for each one\n    //we map a value of 0 (dead cell state)\n    rows.push(Array.from(Array(gridLayout[1]), () => 0));\n  }\n\n  return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n  let size = [rows, cols];\n  gridLayout = [...size];\n  console.log(gridLayout);\n};\n\nconst timeSet = time => {\n  speed = time;\n};\n\nconst countNeighbors = (grid, x, y) => {\n  return neighborsLoc.reduce((acc, [i, j]) => {\n    //this takes the neighborsLoc Arr and returns a number to see how many are alive\n    const row = (x + i + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n\n    const col = (y + j + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n\n    acc += grid[row][col];\n    return acc;\n  }, 0);\n};\n\nexport const Grid = () => {\n  _s();\n\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    return clearGrid();\n  });\n  const [play, setPlay] = useState(false);\n  const [autoTime, setAutoTime] = useState(500);\n  const [generation, setGeneration] = useState(0);\n  const [pruebaX, setPruebaX] = useState(prueba);\n\n  const nextGen = () => {\n    setPlay(true);\n\n    if (play === false) {\n      playRef.current = true;\n      console.log('corriendo');\n      autoGame();\n    }\n\n    setPlay(false);\n    if (play) playRef.current = false;\n  }; //useRef to store the value of play and using it on autoGame func\n\n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generations\n\n  const genRef = useRef(generation);\n  genRef.current = generation; //useCallback to run autoGame function only once\n\n  const autoGame = useCallback(() => {\n    //to ensure that the game stops\n    if (!playRef.current) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors\n      return produce(currentGrid, gridChanged => {\n        for (let i = 0; i < gridLayout[0]; i++) {\n          for (let j = 0; j < gridLayout[1]; j++) {\n            let livingNeighbors = countNeighbors(currentGrid, i, j);\n            if (currentGrid[i][j] === 1 && (livingNeighbors < 2 || livingNeighbors > 3)) gridChanged[i][j] = 0;\n            if (currentGrid[i][j] === 0 && livingNeighbors === 3) gridChanged[i][j] = 1;\n          }\n        }\n      });\n    });\n    setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, speed);\n  }, []); //useCallback closes here\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"justify-content-center\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(true);\n\n            if (play === false) {\n              playRef.current = true;\n              autoGame();\n            }\n          },\n          children: \"Iniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setPlay(false);\n            if (play) playRef.current = false;\n          },\n          children: \"Detener \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            nextGen();\n          },\n          children: \"Sig. Generacion \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#4dd2ff',\n            color: 'white',\n            border: 'none',\n            marginRight: '20px'\n          },\n          onClick: () => {\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n          },\n          children: \"Reiniciar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: '350px'\n          },\n          type: \"number\",\n          placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n          onChange: e => {\n            timeSet(e.target.value);\n            setAutoTime(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y con una velocidad de \", autoTime / 1000, \" seg \", prueba[0], \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n              columnGap: '5px',\n              rowGap: '5px'\n            },\n            children: grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                //produce() takes the argument of individual grid, copies it and then mutates it.\n                const newGrid = produce(grid, gridCopy => {\n                  //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                  gridCopy[i][j] ^= 1;\n                });\n                setGrid(newGrid);\n              },\n              style: {\n                width: 20,\n                height: 20,\n                border: 'solid 1px blue',\n                borderRadius: '100%',\n                backgroundColor: grid[i][j] ? 'green' : ''\n              }\n            }, `${i}-${j}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Editar tama\\xF1os del grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(10, 10);\n              setGrid(clearGrid());\n            },\n            children: \" 10 x 10 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(20, 30);\n              setGrid(clearGrid());\n            },\n            children: \" 20 x 30 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none'\n            },\n            onClick: () => {\n              gridSize(25, 25);\n              setGrid(clearGrid());\n            },\n            children: \" 25 x 25 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              backgroundColor: '#4dd2ff',\n              color: 'white',\n              border: 'none',\n              marginBottom: '15px'\n            },\n            onClick: () => {\n              gridSize(50, 30);\n              setGrid(clearGrid());\n            },\n            children: \" 50 x 30 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '14x'\n            },\n            children: [\"Generaci\\xF3n # \", generation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"QI+Cm1ljkNMS7f/H1gsFyp/isVg=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","gridLayoutTest","Button","Container","Col","Row","Input","produce","gridLayout","speed","prueba","neighborsLoc","clearGrid","rows","i","push","Array","from","gridSize","cols","size","console","log","timeSet","time","countNeighbors","grid","x","y","reduce","acc","j","row","col","Grid","setGrid","play","setPlay","autoTime","setAutoTime","generation","setGeneration","pruebaX","setPruebaX","nextGen","playRef","current","autoGame","genRef","currentGrid","gridChanged","livingNeighbors","setTimeout","backgroundColor","color","border","marginRight","width","e","target","value","display","gridTemplateColumns","columnGap","rowGap","map","newGrid","gridCopy","height","borderRadius","marginBottom","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport {gridLayoutTest} from './Controls'\nimport {Button, Container, Col,  Row, Input} from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\n\n//Initial values\nlet gridLayout = [50, 30]; //numRow, numCols\nlet speed = 1000;\n// let numRows = 50;\n// let numCols = 30;\n\nlet prueba = gridLayoutTest;\n\n//positions from which the cell looks for neighbors\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n    const rows = [];\n    //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n    for (let i = 0; i < gridLayout[0]; i++) {\n        //here we push to row Array using .from method, the length will be numCols and for each one\n        //we map a value of 0 (dead cell state)\n        rows.push(Array.from(Array(gridLayout[1]), () => 0 ));\n    }\n    return rows;\n};\n\nconst gridSize = (rows = 50, cols = 30) => {\n    let size = [rows, cols]\n    gridLayout = [...size];\n    console.log(gridLayout);\n};\nconst timeSet= (time) => {\n    speed = time;\n}\n\nconst countNeighbors = (grid, x, y) => {\n    return neighborsLoc.reduce((acc, [i, j]) => { //this takes the neighborsLoc Arr and returns a number to see how many are alive\n      const row = (x + i + gridLayout[0]) % gridLayout[0]; //checks every row and col to get alive (1) or dead(0) status\n      const col = (y + j + gridLayout[1]) % gridLayout[1]; // we do this with the modulus operator\n      acc += grid[row][col];\n      return acc;\n    }, 0);\n  };\n\nexport const Grid = () => {\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return clearGrid();\n    });\n\n    const [play, setPlay] = useState(false);\n    const [autoTime, setAutoTime] = useState(500);\n    const [generation, setGeneration] = useState(0);\n    const [pruebaX, setPruebaX] = useState(prueba)\n\n    const nextGen = () => {\n        setPlay(true);\n        if(play === false){\n            playRef.current = true;\n            console.log('corriendo');\n            autoGame();\n        }\n        setPlay(false);\n        if(play) playRef.current = false;\n    };\n\n\n\n    //useRef to store the value of play and using it on autoGame func\n    const playRef = useRef(play);\n    playRef.current = play;\n\n    //idem for generations\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n        //to ensure that the game stops\n        if(!playRef.current) {\n            return;\n        }\n\n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors\n            return produce(currentGrid, gridChanged => {\n                for (let i = 0; i < gridLayout[0]; i++) {\n                    for (let j = 0; j < gridLayout[1]; j++) {\n                        let livingNeighbors = countNeighbors(currentGrid, i, j);                              \n                        if (currentGrid[i][j] === 1 && (livingNeighbors < 2 || livingNeighbors > 3))\n                        gridChanged[i][j] = 0;\n                        if (currentGrid[i][j] === 0 && livingNeighbors === 3) gridChanged[i][j] = 1;\n                    }\n                }\n            });\n        });\n        setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, speed);\n\n    },[]) //useCallback closes here\n\n    return (\n        <Container className='justify-content-center'>\n        <Row className='mb-4'>\n            <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(true);\n            if(play === false){\n                playRef.current = true;\n                autoGame();\n            }\n        }} >Iniciar</Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setPlay(false);\n            if(play) playRef.current = false;\n        }} >Detener </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            nextGen();\n        }} >Sig. Generacion </Button>\n        </Col>\n        <Col>\n        <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginRight:'20px'}} onClick={()=>{\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n        }} >Reiniciar </Button>\n        </Col>\n        <Col>\n        <Input style={{width: '350px'}}\n        type='number'\n        placeholder='Introduce tiempo de ejecución deseado'\n        onChange={e => {\n            timeSet(e.target.value);\n            setAutoTime(e.target.value);\n        }}\n        />\n        </Col>\n        </Row>\n        <Row>\n        <Col>\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y con una velocidad de {autoTime/1000} seg {prueba[0]} </p>\n        </Col>\n        </Row>\n        <Row>\n        <Col>        \n        <div className='d-flex justify-content-center'>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => \n                <div \n                    key={`${i}-${j}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        const newGrid = produce(grid, gridCopy => {\n                            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                            gridCopy[i][j] ^= 1;\n                        });\n                        setGrid(newGrid);\n                }} \n                style={{ \n                    width:20, \n                    height:20, \n                    border: 'solid 1px blue',\n                    borderRadius: '100%', \n                    backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n                </div>\n            </div>\n            </Col>\n            <Col>\n            <p>Editar tamaños del grid</p>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(10,10);\n                setGrid(clearGrid());\n            }}> 10 x 10 </Button>\n            </Col>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(20,30);\n                setGrid(clearGrid());\n            }}> 20 x 30 </Button>\n            </Col>\n            <Col className='mb-3'>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none'}} onClick={()=>{\n                gridSize(25,25);\n                setGrid(clearGrid());\n            }}> 25 x 25 </Button>\n            </Col>\n            <Col>\n            <Button style={{backgroundColor:'#4dd2ff', color:'white', border:'none', marginBottom:'15px'}} onClick={()=>{\n                gridSize(50,30);\n                setGrid(clearGrid());\n            }}> 50 x 30 </Button>\n            </Col>\n            <Col>\n            <p style={{fontSize:'14x'}}>Generación # {generation}</p>\n            </Col>\n            </Col>\n        </Row>\n        </Container>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}