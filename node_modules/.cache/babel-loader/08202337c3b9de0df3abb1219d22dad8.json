{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { Container, Col, Row } from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\n\nimport { helperFunctions } from '../Resources/functions'; //functions used in the Component\n\nimport { GameButtons } from './GameButtons'; //Initial values\n\nlet gridLayout = [50, 30]; //numRow, numCols\n\nlet speed = 1000; //positions from which the cell looks for neighbors\n\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n]; //component starts here  \n\nexport const Game = () => {\n  _s();\n\n  //useState Hook variables\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    return helperFunctions.clearGridX(gridLayout);\n  });\n  const [play, setPlay] = useState(false); //to set the play status\n\n  const [autoTime, setAutoTime] = useState(speed); //to set game speed\n\n  const [generation, setGeneration] = useState(0); //to view current generation\n  //useRef to store the value of play and using it on autoGame func.\n  //Refs values will be accessed and changed frequently.\n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generations\n\n  const genRef = useRef(generation);\n  genRef.current = generation; //to initialize nextGen command\n\n  const nextGen = () => {\n    setPlay(true);\n\n    if (play === false) {\n      playRef.current = true;\n      console.log('Game initialized');\n      autoGame();\n    }\n\n    setPlay(false);\n    if (play) playRef.current = false;\n  }; //to change gridSize onClick buttons\n\n\n  const buttonClickedGrid = (rows, cols) => {\n    gridLayout = helperFunctions.gridSize(rows, cols);\n    setGrid(helperFunctions.clearGridX(gridLayout));\n  }; //useCallback to run autoGame function only once\n\n\n  const autoGame = useCallback(() => {\n    //to ensure that the game stops, if the playRef is false we return the autoGame function\n    if (playRef.current === false) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors.\n      return produce(currentGrid, gridChanged => {\n        for (let rowsIteration = 0; rowsIteration < gridLayout[0]; rowsIteration++) {\n          for (let colsIteration = 0; colsIteration < gridLayout[1]; colsIteration++) {\n            let livingNeighbors = helperFunctions.countLiving(currentGrid, rowsIteration, colsIteration, neighborsLoc, gridLayout);\n\n            if (currentGrid[rowsIteration][colsIteration] === 1 && (livingNeighbors < 2 || livingNeighbors > 3)) {\n              gridChanged[rowsIteration][colsIteration] = 0;\n            }\n\n            if (currentGrid[rowsIteration][colsIteration] === 0 && livingNeighbors === 3) {\n              gridChanged[rowsIteration][colsIteration] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, speed);\n  }, []); //useCallback closes here, [] to run just once\n  //return Statement starts here\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"justify-content-center\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            className: \"mt-5\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Bienvenido al\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Juego de la vida\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"speedIn mt-5\",\n          style: {\n            width: '350px'\n          },\n          type: \"number\",\n          placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n          onChange: e => {\n            speed = helperFunctions.timeSet(e.target.value);\n            setAutoTime(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"turn\",\n          children: [\"Turno: \", generation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Juego \", play ? 'iniciado' : 'detenido']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"con una velocidad de \", autoTime / 1000, \" seg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons-y\",\n          onClick: () => {\n            setPlay(true);\n\n            if (play === false) {\n              playRef.current = true;\n              autoGame();\n            }\n          },\n          children: \"Iniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons-y\",\n          onClick: () => {\n            setPlay(false);\n            if (play) playRef.current = false;\n          },\n          children: \"Detener \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons-y\",\n          onClick: () => {\n            nextGen();\n          },\n          children: \"Siguiente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons-r\",\n          onClick: () => {\n            setGrid(helperFunctions.clearGridX(gridLayout));\n            setPlay(false);\n            setGeneration(0);\n          },\n          children: \"Reiniciar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n              columnGap: '5px',\n              rowGap: '5px'\n            },\n            children: grid.map((rows, xCoord) => rows.map((col, yCoord) => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                //produce() takes the argument of individual grid, copies it and then mutates it.\n                const newGrid = produce(grid, gridEdited => {\n                  //check if current cell at [xCoord][yCoord] is dead or alive, it toggles the value between them \n                  gridEdited[xCoord][yCoord] ^= 1;\n                });\n                setGrid(newGrid);\n              },\n              style: {\n                width: 20,\n                height: 20,\n                border: 'solid 1px #62F6FF',\n                borderRadius: '100%',\n                backgroundColor: grid[xCoord][yCoord] ? '#62F6FF' : ''\n              }\n            }, `${xCoord}-${yCoord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          paddingTop: '35px',\n          paddingBottom: '35px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(GameButtons, {\n          changeGridSize: () => buttonClickedGrid(10, 10),\n          textToShow: \"10 x 10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          changeGridSize: () => buttonClickedGrid(20, 30),\n          textToShow: \"20 x 30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          changeGridSize: () => buttonClickedGrid(25, 25),\n          textToShow: \"25 x 25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          changeGridSize: () => buttonClickedGrid(50, 30),\n          textToShow: \"50 x 30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"HZe/Ls/Vb7rAH8A6kl5BGpafuPw=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Game.js"],"names":["React","useState","useCallback","useRef","Container","Col","Row","produce","helperFunctions","GameButtons","gridLayout","speed","neighborsLoc","Game","grid","setGrid","clearGridX","play","setPlay","autoTime","setAutoTime","generation","setGeneration","playRef","current","genRef","nextGen","console","log","autoGame","buttonClickedGrid","rows","cols","gridSize","currentGrid","gridChanged","rowsIteration","colsIteration","livingNeighbors","countLiving","setTimeout","width","e","timeSet","target","value","display","gridTemplateColumns","columnGap","rowGap","map","xCoord","col","yCoord","newGrid","gridEdited","height","border","borderRadius","backgroundColor","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport {Container, Col,  Row} from 'reactstrap';\nimport produce from 'immer'; //to simplify state changing\nimport { helperFunctions } from '../Resources/functions'; //functions used in the Component\nimport  { GameButtons } from './GameButtons';\n\n\n//Initial values\nlet gridLayout = [50, 30]; //numRow, numCols\nlet speed = 1000;\n\n//positions from which the cell looks for neighbors\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\n\n//component starts here  \nexport const Game = () => {\n    //useState Hook variables\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return helperFunctions.clearGridX(gridLayout);\n    });\n    const [play, setPlay] = useState(false); //to set the play status\n    const [autoTime, setAutoTime] = useState(speed); //to set game speed\n    const [generation, setGeneration] = useState(0); //to view current generation\n\n    //useRef to store the value of play and using it on autoGame func.\n    //Refs values will be accessed and changed frequently.\n    const playRef = useRef(play);\n    playRef.current = play; \n\n    //idem for generations\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    //to initialize nextGen command\n    const nextGen = () => {\n        setPlay(true);\n        if(play === false){\n            playRef.current = true;\n            console.log('Game initialized');\n            autoGame();\n        }\n        setPlay(false);\n        if(play) playRef.current = false;\n    };\n\n    //to change gridSize onClick buttons\n    const buttonClickedGrid =(rows, cols) => {\n        gridLayout = helperFunctions.gridSize(rows,cols);\n        setGrid(helperFunctions.clearGridX(gridLayout));\n    };\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n        //to ensure that the game stops, if the playRef is false we return the autoGame function\n        if(playRef.current === false) {\n            return;\n        }\n        \n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors.\n            return produce(currentGrid, gridChanged => {\n                for (let rowsIteration = 0; rowsIteration < gridLayout[0]; rowsIteration++) {\n                    for (let colsIteration = 0; colsIteration < gridLayout[1]; colsIteration++) {\n                        let livingNeighbors = helperFunctions.countLiving(currentGrid, rowsIteration, colsIteration, neighborsLoc, gridLayout);                              \n                        if (currentGrid[rowsIteration][colsIteration] === 1 && (livingNeighbors < 2 || livingNeighbors > 3)){\n                        gridChanged[rowsIteration][colsIteration] = 0;\n                        }\n                        if (currentGrid[rowsIteration][colsIteration] === 0 && livingNeighbors === 3) {\n                        gridChanged[rowsIteration][colsIteration] = 1;\n                        }\n                    }\n                }\n            });\n        });\n        setGeneration(++genRef.current); //increases generation by one per turn\n        setTimeout(autoGame, speed);\n\n    },[]) //useCallback closes here, [] to run just once\n\n\n    //return Statement starts here\n    return (\n        <Container className='justify-content-center'>\n            {/* Title begins here */}\n            <Row>\n                <Col>\n                    <Col>\n                        <Row className='mt-5'>\n                        <h5>Bienvenido al</h5>\n                        </Row>\n                        <Row>\n                        <h2>Juego de la vida</h2>\n                        </Row>\n                    </Col>\n                </Col>\n                <Col>\n                <input className='speedIn mt-5' style={{width: '350px'}}\n                type='number'\n                placeholder='Introduce tiempo de ejecución deseado'\n                onChange={e => {\n                    speed = helperFunctions.timeSet(e.target.value);\n                    setAutoTime(e.target.value);\n                }}\n                />\n                </Col>\n            </Row>\n            {/* Title ends here */}\n            {/* Game status begins here */}\n            <Row>\n                <Col>\n                <p className='turn'>Turno: {generation}</p>\n                </Col>\n                <Col>\n                    <Row>\n                    <p>Juego {play ? 'iniciado' : 'detenido'}</p>\n                    </Row>\n                    <Row>\n                    <p>con una velocidad de {autoTime/1000} seg</p>\n                    </Row>\n                </Col>\n            </Row>\n            {/* Game status ends here */}\n            {/* Control buttons start here */}\n            <Row className='mb-4'>\n                <Col>\n                <button className='buttons-y' onClick={()=>{\n                    setPlay(true);\n                    if(play === false){\n                        playRef.current = true;\n                        autoGame();\n                    }\n                }} >Iniciar</button>\n                </Col>\n                <Col>\n                <button className='buttons-y' onClick={()=>{\n                    setPlay(false);\n                    if(play) playRef.current = false;\n                }} >Detener </button>\n                </Col>\n                <Col>\n                <button className='buttons-y' onClick={()=>{\n                    nextGen();\n                }} >Siguiente</button>\n                </Col>\n                <Col>\n                <button className='buttons-r' onClick={()=>{\n                    setGrid(helperFunctions.clearGridX(gridLayout));\n                    setPlay(false);\n                    setGeneration(0);\n                }} >Reiniciar </button>\n                </Col>\n            </Row>\n            {/* Control buttons end here */}\n            {/* Grid begins here */}\n            <Row> \n                <Col>        \n                <div className='d-flex justify-content-center'>\n                <div style={{\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${gridLayout[1]}, 20px)`,\n                    columnGap: '5px',\n                    rowGap: '5px'\n                }}>\n                    {/* this maps the grid's x and y coordinates */}\n                    {grid.map ((rows, xCoord) =>\n                        rows.map( (col, yCoord) => \n                        <div \n                            key={`${xCoord}-${yCoord}`}\n                            onClick={()=>{\n                                //produce() takes the argument of individual grid, copies it and then mutates it.\n                                const newGrid = produce(grid, gridEdited => {\n                                    //check if current cell at [xCoord][yCoord] is dead or alive, it toggles the value between them \n                                    gridEdited[xCoord][yCoord] ^= 1;\n                                });\n                                setGrid(newGrid);\n                        }} \n                        style={{ \n                            width:20, \n                            height:20, \n                            border: 'solid 1px #62F6FF',\n                            borderRadius: '100%', \n                            backgroundColor: grid[xCoord][yCoord] ? '#62F6FF' : ''}} />\n                        ))}\n                        </div>\n                    </div>\n                    </Col>\n                </Row>\n                {/* Grid Ends here */}\n                {/* Grid Size Buttons Start Here */}\n                <Col>\n                    <Row style={{paddingTop:'35px', paddingBottom:'35px'}}>\n                        <GameButtons changeGridSize={() => buttonClickedGrid(10,10)} textToShow='10 x 10'/>\n                        <GameButtons changeGridSize={() => buttonClickedGrid(20,30)} textToShow='20 x 30'/>\n                        <GameButtons changeGridSize={() => buttonClickedGrid(25,25)} textToShow='25 x 25'/>\n                        <GameButtons changeGridSize={() => buttonClickedGrid(50,30)} textToShow='50 x 30'/>\n                    </Row>\n                </Col>\n        </Container>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}