{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { Button, Container, Col, Row } from 'reactstrap';\nimport produce from 'immer';\nlet numRows = 50;\nlet numCols = 30;\nconst neighborsLoc = [[0, 1], //north\n[1, 1], //north-east\n[1, 0], //east\n[1, -1], //south-east\n[0, -1], //south\n[-1, -1], //south-west\n[-1, 0], //west\n[-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n  const rows = []; //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n\n  for (let i = 0; i < numRows; i++) {\n    //here we push to row Array using .from method, the length will be numCols and for each one\n    //we map a value of 0 (dead cell state)\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nexport const Grid = () => {\n  _s();\n\n  //to create grid, we use useState hook\n  const [grid, setGrid] = useState(() => {\n    return clearGrid();\n  });\n  const [play, setPlay] = useState(false);\n  const [autoTime, setAutoTime] = useState(1000);\n  const [generation, setGeneration] = useState(0); //useRef to store the value of play and using it on autoGame func\n\n  const playRef = useRef(play);\n  playRef.current = play; //idem for generations\n\n  const genRef = useRef(generation);\n  genRef.current = generation; //useCallback to run autoGame function only once\n\n  const autoGame = useCallback(() => {\n    if (!playRef.current) {\n      return;\n    }\n\n    setGrid(currentGrid => {\n      //changes the grid after looking out for neighbors\n      return produce(currentGrid, gridChanged => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let livingNeighbors = 0;\n            neighborsLoc.forEach(([x, y]) => {\n              //looks around for living neighbors\n              const newI = i + x;\n              const newJ = j + y;\n\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n              }\n            });\n\n            if (livingNeighbors < 2 || livingNeighbors > 3) {\n              gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n            } else if (currentGrid[i][j] === 0 && livingNeighbors === 3) {\n              gridChanged[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, autoTime);\n  }, []); //useCallback closes here\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configbuttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        outline: true,\n        color: \"primary\",\n        onClick: () => {\n          setPlay(true);\n\n          if (play === false) {\n            playRef.current = true;\n            console.log('corriendo');\n            autoGame();\n          }\n        },\n        children: \"Iniciar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        outline: true,\n        color: \"secondary\",\n        onClick: () => {\n          setPlay(false);\n          if (play) playRef.current = false;\n        },\n        children: \"Detener \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        outline: true,\n        color: \"warning\",\n        onClick: () => {\n          setGrid(clearGrid());\n          setPlay(false);\n          setGeneration(0);\n        },\n        children: \"Reiniciar \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Introduce tiempo de ejecuci\\xF3n deseado\",\n        onChange: e => setAutoTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Juego \", play ? 'Iniciado' : 'Detenido', \" y simulando a \", autoTime, \" en la \", generation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cells\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n          columnGap: '5px',\n          rowGap: '5px'\n        },\n        children: grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            //produce() takes the argument of individual grid, copies it and then mutates it.\n            //\n            const newGrid = produce(grid, gridCopy => {\n              //check if current cell at [i][j] is dead or alive, it toggles the value between them \n              gridCopy[i][j] = grid[i][j] ? 0 : 1;\n            });\n            setGrid(newGrid);\n          },\n          style: {\n            width: 20,\n            height: 20,\n            border: 'solid 1px blue',\n            borderRadius: '100%',\n            backgroundColor: grid[i][j] ? 'green' : ''\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"hykHD/LS8VnUsY59ShXhtM0Q/z8=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/jrincon/Documents/ Programming/Projects/jRCoding/game-of-life/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","Button","Container","Col","Row","produce","numRows","numCols","neighborsLoc","clearGrid","rows","i","push","Array","from","Grid","grid","setGrid","play","setPlay","autoTime","setAutoTime","generation","setGeneration","playRef","current","genRef","autoGame","currentGrid","gridChanged","j","livingNeighbors","forEach","x","y","newI","newJ","setTimeout","console","log","e","target","value","display","gridTemplateColumns","columnGap","rowGap","map","col","newGrid","gridCopy","width","height","border","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport {Button, Container, Col, Row} from 'reactstrap';\nimport produce from 'immer';\n\n\nlet numRows = 50;\nlet numCols = 30;\n\nconst neighborsLoc = [\n    [0, 1], //north\n    [1, 1], //north-east\n    [1, 0], //east\n    [1, -1], //south-east\n    [0, -1], //south\n    [-1, -1], //south-west\n    [-1, 0], //west\n    [-1, 1] //northwest\n];\n\nconst clearGrid = () => {\n    const rows = [];\n    //iterate from 0 to numRows (set by user) and for each row, create numCols (also set by user)\n    for (let i = 0; i < numRows; i++) {\n        //here we push to row Array using .from method, the length will be numCols and for each one\n        //we map a value of 0 (dead cell state)\n        rows.push(Array.from(Array(numCols), () => 0 ));\n    }\n    return rows;\n}\n\nexport const Grid = () => {\n    //to create grid, we use useState hook\n    const [grid, setGrid] = useState(() => {\n        return clearGrid();\n    });\n\n    const [play, setPlay] = useState(false);\n    const [autoTime, setAutoTime] = useState(1000);\n    const [generation, setGeneration] = useState(0);\n\n    //useRef to store the value of play and using it on autoGame func\n    const playRef = useRef(play);\n    playRef.current = play;\n\n    //idem for generations\n    const genRef = useRef(generation);\n    genRef.current = generation;\n\n    //useCallback to run autoGame function only once\n    const autoGame = useCallback(() => {\n        if(!playRef.current) {\n            return;\n        }\n\n        setGrid(currentGrid => {  //changes the grid after looking out for neighbors\n            return produce(currentGrid, gridChanged => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let j = 0; j < numCols; j++) {\n                        let livingNeighbors = 0;\n                        neighborsLoc.forEach( ([x, y]) => { //looks around for living neighbors\n                            const newI = i + x;\n                            const newJ = j + y;\n                            if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols){\n                                livingNeighbors += currentGrid[newI][newJ]; //if alive, adds 1 if not then 0\n                            }\n                        });\n\n                        if (livingNeighbors < 2 || livingNeighbors > 3) {\n                            gridChanged[i][j] = 0; //if it has less than 2 living or more than 3, the cell dies\n                        } else if (currentGrid[i][j] === 0 && livingNeighbors ===3){\n                            gridChanged[i][j] = 1;\n                        }\n                    }\n                }\n            });\n        });\n        setGeneration(++genRef.current); //increases generation by one per turn\n\n    setTimeout(autoGame, autoTime);\n\n    },[]) //useCallback closes here\n\n    return (\n        <Container>\n        <div className='configbuttons'>\n        <Button outline color='primary' onClick={()=>{\n            setPlay(true);\n            if(play === false){\n                playRef.current = true;\n                console.log('corriendo');\n                autoGame();\n            }\n        }} >Iniciar</Button>\n\n        <Button outline color='secondary' onClick={()=>{\n            setPlay(false);\n            if(play) playRef.current = false;\n        }} >Detener </Button>\n\n        <Button outline color='warning' onClick={()=>{\n            setGrid(clearGrid());\n            setPlay(false);\n            setGeneration(0);\n        }} >Reiniciar </Button>\n\n        <input\n        placeholder='Introduce tiempo de ejecución deseado'\n        onChange={e => setAutoTime(e.target.value)}\n        />\n        </div>\n        <div className='status'>\n\n        <p>Juego {play ? 'Iniciado' : 'Detenido'} y simulando a {autoTime} en la {generation}</p>\n\n        </div>\n        <div className= 'cells'>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            columnGap: '5px',\n            rowGap: '5px'\n        }}>\n            {grid.map ((rows, i) =>\n                rows.map( (col, j) => \n                <div \n                    key={`${i}-${j}`}\n                    onClick={()=>{\n                        //produce() takes the argument of individual grid, copies it and then mutates it.\n                        //\n                        const newGrid = produce(grid, gridCopy => {\n                            //check if current cell at [i][j] is dead or alive, it toggles the value between them \n                            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                        });\n                    setGrid(newGrid);\n                }} \n                style={{ \n                    width:20, \n                    height:20, \n                    border: 'solid 1px blue',\n                    borderRadius: '100%', \n                    backgroundColor: grid[i][j] ? 'green' : ''}} />\n                ))}\n                </div>\n            </div>\n        </Container>\n    )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}